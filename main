#!/bin/env bash
Path=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
source ${Path}/function
if [ ! "$(uname -o)" == "Android" ];then
  log.error "错误 非Android 无法运行"
fi

cd $HOME
if [ ! -d $HOME/AF-Proot ];then
  mkdir AF-Proot
fi
cd $HOME/AF-Proot
#详见 https://images.linuxcontainers.org
ConfigPath="${Path}/config.json"
Linux="$(jq -r .Linux ${ConfigPath})"
Version="$(jq -r .Version ${ConfigPath})"
Arch="$(jq -r .Arch ${ConfigPath})"
Variant="$(jq -r .Variant ${ConfigPath})"
FOLDER="${Linux}-${Version}"

if [ -d ${FOLDER} ]
then
  log.warn "${FOLDER} [已经部署]"
  exit 0
else
  mkdir -p ${FOLDER}
fi

if getLocation
then
  URL="https://mirrors.cernet.edu.cn/lxc-images/images/${Linux}/${Version}/${Arch}/${Variant}/"
  log.info "正在获取 构建日期"
  BuildDate=$(curl -sL ${URL} | grep 'class="link"><a href="' | grep -oE 'title="[^"]+"' | grep -oE '[^"]+' | tail -n 1)
  if [ -z ${BuildDate} ];then
    log.error "构建日期为空"
    log.warn "镜像: $(curl -s ${URL} | grep -oP 'https?://\K[^/]+')"
    rm -rf ${FOLDER}
    exit 1
  fi
  URL="https://mirrors.cernet.edu.cn/lxc-images/images/${Linux}/${Version}/${Arch}/${Variant}/${BuildDate}/rootfs.tar.xz"
else
  URL="https://images.linuxcontainers.org/images/${Linux}/${Version}/${Arch}/${Variant}/"
  echo $URL
  log.info "正在获取 构建日期"
  BuildDate=$(curl -sL ${URL} | grep href | tail -n 1 | awk -F'[>/]' '{print $3}')
  if [ -z ${BuildDate} ];then
    log.error "构建日期为空"
    rm -rf ${FOLDER}
    exit 1
  fi
  URL="https://images.linuxcontainers.org/images/${Linux}/${Version}/${Arch}/${Variant}/${BuildDate}/rootfs.tar.xz"
fi
getFile rootfs.tar.xz ${URL}
log.info "开始解压 镜像文件"
if pv rootfs.tar.xz | proot --link2symlink tar -xJf - -C ${FOLDER} > /dev/null 2>&1 ||:
then
  log.success "解压成功"
  rm -rf rootfs.tar.xz
else
  log.error "解压失败"
  exit
fi
if [ ! -d Proc ]
then
  mkdir Proc
  gitCR release ProotProc.tar.xz ArcticFox520/AF-Proot ProotProc.tar.xz
  log.info "开始解压 ProotProc.tar.xz"
  if pv ProotProc.tar.xz | tar -xJf - -C Proc
  then
    log.success "解压成功"
    rm -rf ProotProc.tar.xz
  else
    log.error "解压失败"
    exit
  fi
fi
log.info "开始构建 容器启动脚本"
command="proot"
command+=" --link2symlink"
command+=" -0"
command+=" -r $HOME/AF-Proot/${FOLDER}"
command+=" -b /dev"
command+=" -b /proc"
command+=" -b $HOME/AF-Proot/${FOLDER}/root:/dev/shm"
ProcFile=(
"buddyinfo"
"cgroups"
"consoles"
"crypto"
"devices"
"diskstats"
"execdomains"
"fb"
"filesystems"
"interrupts"
"iomem"
"ioports"
"kallsyms"
"keys"
"key-users"
"kmsg"
"kpageflags"
"loadavg"
"locks"
"misc"
"modules"
"pagetypeinfo"
"partitions"
"sched_debug"
"softirqs"
"stat"
"timer_list"
"uptime"
"vmallocinfo"
"vmstat"
"zoneinfo"
)
for i in ${ProcFile[@]}
do
  if cat /proc/${i} > /dev/null 2>&1
  then
    rm Proc/${i}
    cp /proc/${i} Proc/${i}
  else
    log.warn "无法访问 /proc/${i}"
    log.info "正在修复 Fixing..."
    sleep 0.2s
  fi
  command+=" -b $HOME/AF-Proot/Proc/${i}:/proc/${i}"
done
if cat /proc/bus/input/devices > /dev/null 2>&1
then
  rm -rf Proc/bus
  cp -r /proc/bus Proc/bus
else
  log.warn "无法访问 /proc/bus"
  log.info "正在修复 Fixing..."
fi
command+=" -b $HOME/AF-Proot/Proc/bus:/proc/bus"
if cat /proc/version > /dev/null 2>&1
then
  rm Proc/version
  cp /proc/version Proc/version
else
  log.warn "无法访问 /proc/version"
  log.info "正在修复 Fixing..."
  VersionData="$(uname -a) (gcc version 15.2 20250808 (release) (GCC) )"
  log.warn "版本文件: ${VersionData}"
  rm Proc/version
  echo ${VersionData} > Proc/version
fi
command+=" -b $HOME/AF-Proot/Proc/version:/proc/version"
command+=" -w /root"
command+=" /usr/bin/env -i"
command+=" HOME=/root"
command+=" PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/games:/usr/local/games"
command+=" TERM=\$TERM"
command+=" LANG=zh_CN.UTF-8"
if [ -e ${Linux}-${Version}/bin/bash ] || [ -e ${Linux}-${Version}/usr/bin/bash ]
then
  command+=" /bin/bash --login"
elif [ -e ${Linux}-${Version}/bin/sh ] || [ -e ${Linux}-${Version}/usr/bin/sh ]
then
  command+=" /bin/bash --login"
else
  command+=" /bin/bash --login"
fi

echo ${command} > start-${Linux}-${Version}.sh
touch $HOME/AF-Proot/${FOLDER}/root/.hushlogin
echo cat /etc/issue.net >> $HOME/AF-Proot/${FOLDER}/etc/profile
cat > start-${Linux}-${Version}.sh <<- FOX
unset LD_PRELOAD
if [ -z "\$1" ]
then
    exec ${command}
else
    exec ${command} -c "\$@"
fi
FOX
chmod +x start-${Linux}-${Version}.sh
log.info "容器构建完成"