#!/bin/env bash
black="\e[30m"
red="\033[31m"
green="\033[32m"
yellow="\033[33m"
blue="\033[34m"
purple="\033[35m"
cyan="\033[36m"
white="\033[37m"
background="\033[0m"
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'
export GHP="https://gh.arcticfox.top/"
function log.info(){
  local timestamp=$(date +"%H:%M:%S")
  echo -e "${BLUE}[INFO][${timestamp}] - $1${NC}"
}
function log.success(){
  local timestamp=$(date +"%H:%M:%S")
  echo -e "${GREEN}[SUCCESS][${timestamp}] - $1${NC}"
}
function log.warn(){
  local timestamp=$(date +"%H:%M:%S")
  echo -e "${YELLOW}[WARN][${timestamp}] - $1${NC}"
}
function log.error(){
  local timestamp=$(date +"%H:%M:%S")
  echo -e "${RED}[ERROR][${timestamp}] - $1${NC}" >&2
}
function getLocation(){
if [ -x "$(command -v jq)" ]
then
  ApiList=(
    "ipinfo.io/json .country"
    "ipapi.co/json .country"
    "ip-api.com/json .countryCode"
  )
  for i in ${ApiList[@]}
  do
    local Api=$(echo ${i} | awk '{print $1}')
    local field=$(echo ${i} | awk '{print $2}')
    local result=$(curl -sL --connect-timeout 5 --max-time 10 ${Api})
    if echo "${result}" | jq -r ${field} | grep -q "CN";then
      return 0
    else
      return 1
    fi
  done
else
  if [ -x "$(command -v curl)" ]
  then
    ApiList=(
      "ipinfo.io/country"
      "ipapi.co/country"
    )
    for i in ${ApiList[@]}
    do
      local result=$(curl -sL --connect-timeout 5 --max-time 10 ${i})
      if echo "${result}" | grep -q "CN";then
        return 0
      else
        return 1
      fi
    done
  else
    selectLocation
    return $?
  fi
fi
}
function gitCR(){
gitClone(){
if getLocation
then
  if ! git clone --depth=1 --branch=$1 ${GHP}https://github.com/$2 $3
  then
    returnError
  fi
else
  if ! git clone --depth=1 --branch=$1 https://github.com/$2 $3
  then
    returnError
  fi
fi
}
gitRelease(){
if getLocation
then
  if ! getFile $1 ${GHP}https://github.com/$2/releases/latest/download/$3
  then
    returnError
  fi
else
  if ! getFile $1 https://github.com/$2/releases/latest/download/$3
  then
    returnError
  fi
fi
}
gitRaw(){
if getLocation
then
  getFile $1 ${GHP}https://github.com/$2/raw/refs/heads/$3/$4
else
  getFile $1 ${GHP}https://github.com/$2/raw/refs/heads/$3/$4
fi
}
case $1 in
clone)
  # $2: 分支名
  # $3: 用户名/仓库名
  # $4: 本地仓库名
  gitClone $2 $3 $4;;
release)
  # $2: 保存文件名
  # $3: 用户名/仓库名
  # $4: release文件名
  gitRelease $2 $3 $4;;
raw)
  # $2: 保存文件名
  # $3 用户名/仓库名
  # $4 分支名
  # $5 文件路径
  gitRaw $2 $3 $4 $5;;
esac
}

if getLocation
then
  echo '
# The termux repository mirror
deb https://mirrors.cernet.edu.cn/termux/apt/termux-main/ stable main
deb https://mirrors.cernet.edu.cn/termux/apt/termux-root/ root stable
deb https://mirrors.cernet.edu.cn/termux/apt/termux-x11/ x11 main
' > $PREFIX/etc/apt/sources.list
else
  echo '
# The termux repository
deb https://packages.termux.dev/apt/termux-main/ stable main
deb https://packages.termux.dev/apt/termux-root/ root stable
deb https://packages.termux.dev/apt/termux-x11/ x11 main
' > $PREFIX/etc/apt/sources.list
fi
log.info "正在更新 软件源列表"
apt -y update
log.info "更新完成"
Package=("tar" "gzip" "xz-utils" "unzip" "wget" "curl" "pv" "git" "jq" "proot" "neofetch" "ncurses-utils")
for PKG in ${Package[@]}
do
  if ! dpkg -s ${PKG} > /dev/null 2>&1
  then
    log.info "正在安装 ${PKG}"
    until apt install -y ${PKG}
    do
      log.warn "安装失败 3秒后重试"
      sleep 3s
    done
    log.success "安装成功"
  fi
done

log.info "正在克隆 AF-Proot"
if gitCR clone ArcticFox520/AF-Proot $HOME/.afpt
then
  log.info "克隆成功"
else
  log.info "克隆失败"
  exit 1
fi
ln -sf $HOME/.afpt/start $PREFIX/bin/afpt
chmod +x $PREFIX/bin/afpt